# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: pets-service
# app and org for use with dashboard.serverless.com
custom:
  migrationsPath: './migrations'

frameworkVersion: '2'

provider:
  profile: alegra.training
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  timeout: 30
  stage: ${env:NODE_ENV}
  environment:
    NODE_ENV: ${env:NODE_ENV}
  vpc:
    securityGroupIds:
      - sg-70ee8b68
    subnetIds:
      - subnet-5d03936c
      - subnet-9595dfb4
      - subnet-423d751d

package:
  exclude:
    - layers/modules_layer/**

layers:
  ModulesLayer:
    path: layers/modules_layer
    compatibleRuntimes:
      - nodejs12.x

functions:
  healthCheck:
    handler: handler.healthCheck
    layers:
      - {Ref: ModulesLayerLambdaLayer}
    events:
      - http:
          path: /
          method: get
          cors: true
  migrate:
    handler: handler.migrate
    layers:
      - {Ref: ModulesLayerLambdaLayer}
    events:
      - http:
          path: /migrate
          method: post
          cors: true
  getAllPets:
    handler: controllers/pet/list.list
    layers:
      - {Ref: ModulesLayerLambdaLayer}
    events:
      - http:
          path: pet
          method: get
          cors: true
  getPet:
    handler: controllers/pet/list-one.listOne
    layers:
      - {Ref: ModulesLayerLambdaLayer}
    events:
      - http:
          path: pet/{id}
          method: get
          cors: true
  createPet:
    handler: controllers/pet/create.create
    layers:
      - {Ref: ModulesLayerLambdaLayer}
    events:
      - http:
          path: pet
          method: post
          cors: true
  updatePet:
    handler: controllers/pet/update.update
    layers:
      - {Ref: ModulesLayerLambdaLayer}
    events:
      - http:
          path: pet/{id}
          method: patch
          cors: true
  deletePet:
    handler: controllers/pet/delete.delete
    layers:
      - {Ref: ModulesLayerLambdaLayer}
    events:
      - http:
          path: pet/{id}
          method: delete
          cors: true
  getAllBreeds:
    handler: controllers/breed/list.list
    layers:
      - {Ref: ModulesLayerLambdaLayer}
    events:
      - http:
          path: breed
          method: get
          cors: true
  getBreed:
    handler: controllers/breed/list-one.listOne
    layers:
      - {Ref: ModulesLayerLambdaLayer}
    events:
      - http:
          path: breed/{id}
          method: get
          cors: true
  createBreed:
    handler: controllers/breed/create.create
    layers:
      - {Ref: ModulesLayerLambdaLayer}
    events:
      - http:
          path: breed
          method: post
          cors: true
  updateBreed:
    handler: controllers/breed/update.update
    layers:
      - {Ref: ModulesLayerLambdaLayer}
    events:
      - http:
          path: breed/{id}
          method: patch
          cors: true
  deleteBreed:
    handler: controllers/breed/delete.delete
    layers:
      - {Ref: ModulesLayerLambdaLayer}
    events:
      - http:
          path: breed/{id}
          method: delete
          cors: true
plugins:
  - serverless-offline
